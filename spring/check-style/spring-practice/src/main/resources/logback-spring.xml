<?xml version="1.0" encoding="UTF-8"?>
<included>
  <!-- // 전반적인 Application Log Appender -->
  <appender name="APPLICATION_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>${FILE_LOG_CHARSET}</charset>
    </encoder>
    <file>${log.dir}/${log.filename}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${log.dir}/${log.filename}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <maxFileSize>${max.file.size}</maxFileSize>
      <totalSizeCap>${total.size.cap}</totalSizeCap>
      <maxHistory>${max.history}</maxHistory>
    </rollingPolicy>
  </appender>

  <!-- // Error Log Appender -->
  <appender name="ERROR_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>${FILE_LOG_CHARSET}</charset>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${error.log.dir}/${error.log.filename}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${error.log.dir}/${error.log.filename}.%d{yyyy-MM-dd}.log</fileNamePattern>
      <totalSizeCap>${total.size.cap}</totalSizeCap>
      <maxHistory>${max.history}</maxHistory>
    </rollingPolicy>
  </appender>

  <!-- // SQL Log Appender -->
  <appender name="SQL_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>${FILE_LOG_CHARSET}</charset>
    </encoder>
    <file>${sql.log.dir}/${sql.log.filename}.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${sql.log.dir}/${sql.log.filename}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <maxFileSize>${max.file.size}</maxFileSize>
      <totalSizeCap>${total.size.cap}</totalSizeCap>
      <maxHistory>${max.history}</maxHistory>
    </rollingPolicy>
  </appender>

  <!-- LOG "com.example.springpractice" -->
  <logger name="com.example.springpractice" level="${com.example.springpractice.level}" additivity="false">
    <appender-ref ref="APPLICATION_APPENDER"/>
  </logger>

  <!-- // log4jdbc 옵션 설정 -->
  <logger name="jdbc" level="OFF"/> <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
  <logger name="jdbc.connection" level="OFF"/> <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
  <logger name="jdbc.sqlonly" level="OFF"/> <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
  <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
  <logger name="jdbc.sqltiming" level="${jdbc.sqltiming.level}">
    <appender-ref ref="SQL_APPENDER"/>
  </logger>
  <logger name="jdbc.audit" level="OFF"/> <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
  <logger name="jdbc.resultset" level="OFF"/> <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
  <logger name="jdbc.resultsettable" level="OFF"/>

  <!-- // hikari 옵션 설정 -->
  <logger name="com.zaxxer.hikari" level="${zaxxer.hikari.level}">
    <appender-ref ref="SQL_APPENDER"/>
  </logger>

  <!-- // root level 설정 -->
  <root level="${root.level}">
    <appender-ref ref="APPLICATION_APPENDER"/>
    <appender-ref ref="ERROR_APPENDER"/>
  </root>
</included>
